//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Korea
{
    using Korea.Models;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class PropertyValue
    {
        public PropertyValue()
        {
            this.ProductPropertyValues = new HashSet<ProductPropertyValue>();
        }
    
        public int PropertyValueID { get; set; }
        public int PropertyID { get; set; }
        public string Value { get; set; }
        public Nullable<int> SortOrder { get; set; }
        public Nullable<bool> UseInFilter { get; set; }
    
        public virtual ICollection<ProductPropertyValue> ProductPropertyValues { get; set; }
        public virtual Property Property { get; set; }

        public Dictionary<Guid, string> LoadValues(string Name)
        {
            Dictionary<Guid, string> Values = new Dictionary<Guid,string>();
            using (KoreaContext db2 = new KoreaContext())
            {
                switch (Name)
                {
                    case "Поколение":
                        Values = db2.GenerationForImports.Include("Model")
                                                              .ToDictionary(g => g.Id, g => g.Model.Title + " - " + g.Title);
                        break;
                    case "Позиция":
                        Values = db2.PositionForImports.ToDictionary(g => g.Id, g => g.Title);
                        break;
                }
            }
            return Values;
        }

        public Dictionary<PropertyValue, SavePropertyValue> RecordValues(Dictionary<Guid, string> Dic, Property SiteProperty)
        {
            Dictionary<PropertyValue, SavePropertyValue> PropertysValueDic = new Dictionary<PropertyValue, SavePropertyValue>();

            int i = 1;
            foreach (KeyValuePair<Guid, string> itme in Dic)
            {
                PropertyValue PropertyValueTemp = new PropertyValue()
                {
                    PropertyValueID = i,
                    PropertyID = SiteProperty.PropertyID,
                    Value = itme.Value,
                    SortOrder = 0,
                    UseInFilter = true
                };
                SavePropertyValue NewPropertysTemp = new SavePropertyValue()
                {
                    Id = Guid.NewGuid(),
                    ProgPropertyValueId = itme.Key,
                    IdCach = PropertyValueTemp.PropertyValueID,
                };
                i++;
                PropertysValueDic.Add(PropertyValueTemp, NewPropertysTemp);
            }
            return PropertysValueDic;
        }

        public List<SavePropertyValue> CreateAndDelete(Dictionary<PropertyValue, SavePropertyValue> Dic, 
                                                       List<SavePropertyValue> SavePropertysValue, 
                                                       Property SiteProperty)
        {
            List<SavePropertyValue> Save = SavePropertysValue.ToList();
            List<SavePropertyValue> NewSavePropertysValue = Dic.Select(d => d.Value).ToList();
            List<PropertyValue> ProgramPropertysValue = Dic.Select(d => d.Key).ToList();

            using (koreaEntities1 db = new koreaEntities1())
            {
                //Удаление
                List<PropertyValue> PropertysValueSiteCut = db.PropertyValues
                                                              .Where(p => p.PropertyID == SiteProperty.PropertyID)
                                                              .ToList();

                //Изменеие (для хитрово бага со сменой Guid без изменения Value)
                List<Guid> ProgPropertyValueId = Dic.Select(d => d.Value.ProgPropertyValueId)
                                                    .ToList();
                Save = Save.Where(s => ProgPropertyValueId.Contains(s.ProgPropertyValueId))
                           .ToList();

                //Списко не совподающих значений с новым спмском
                List<PropertyValue> PropertysValueDelete = PropertysValueSiteCut.Where(p => ProgramPropertysValue.Where(n => p.PropertyID == SiteProperty.PropertyID
                                                                                                                        && n.Value == p.Value)
                                                                                                                 .Count() == 0)
                                                                                .ToList();

                //Списко не совподающих значений с сохранёнными значениями
                PropertysValueDelete = PropertysValueDelete.Concat(PropertysValueSiteCut.Where(p => !Save.Select(s => s.SitePropertyValueId)
                                                                                                         .Contains(p.PropertyValueID))
                                                                                        .ToList())
                                                           .Distinct()
                                                           .ToList();

                foreach (PropertyValue DeletPropertyValue in PropertysValueDelete)
                {
                    db.PropertyValues.Remove(DeletPropertyValue);
                }
                db.SaveChanges();

                //Создание
                PropertysValueSiteCut = db.PropertyValues
                                          .Where(p => p.PropertyID == SiteProperty.PropertyID)
                                          .ToList();
                List<PropertyValue> PropertysValueCreate = ProgramPropertysValue.Where(p => PropertysValueSiteCut.Where(n => p.PropertyID == SiteProperty.PropertyID
                                                                                                                        && n.Value == p.Value)
                                                                                                                 .Count() == 0)
                                                                         .ToList();

                Dictionary<PropertyValue, SavePropertyValue> CreaatePropertysDic = new Dictionary<PropertyValue, SavePropertyValue>();

                foreach (PropertyValue CeratePropertyValue in PropertysValueCreate)
                {
                    CreaatePropertysDic.Add(CeratePropertyValue,
                                            NewSavePropertysValue.FirstOrDefault(n => n.IdCach == CeratePropertyValue.PropertyValueID));
                    db.PropertyValues.Add(CeratePropertyValue);
                }
                db.SaveChanges();
                foreach (KeyValuePair<PropertyValue, SavePropertyValue> itemDic in CreaatePropertysDic)
                {
                    itemDic.Value.SitePropertyValueId = itemDic.Key.PropertyValueID;
                    Save.Add(itemDic.Value);
                }
                List<PropertyValue> PropertysValueSite = db.PropertyValues.ToList();
                Save = Save.Where(s => PropertysValueSite.Select(p => p.PropertyValueID)
                                                         .Contains(s.SitePropertyValueId))
                           .ToList();
            }
            return Save;
        }
    }
}
